#include <iostream>
#include "Chip8.h"

const int SCALE = 10;
const int WINDOW_WIDTH = 64 * SCALE;
const int WINDOW_HEIGHT = 32 * SCALE;

const sf::Color pixel_Color = sf::Color((32, 42, 48, 0));
std::map<sf::Keyboard::Key, int> keymap = {
{sf::Keyboard::X, 0x0},
    {sf::Keyboard::Num1, 0x1},
    {sf::Keyboard::Num2, 0x2}, //up 
    {sf::Keyboard::Num3, 0x3},
    {sf::Keyboard::Q, 0x4},//left 
    {sf::Keyboard::W, 0x5},
    {sf::Keyboard::E, 0x6},//right
    {sf::Keyboard::A, 0x7},
    {sf::Keyboard::S, 0x8},
    {sf::Keyboard::D, 0x9},
    {sf::Keyboard::Z, 0xA},
    {sf::Keyboard::C, 0xB},
    {sf::Keyboard::Num4, 0xC},
    {sf::Keyboard::R, 0xD},
    {sf::Keyboard::F, 0xE},
    {sf::Keyboard::V, 0xF}, };

int main() {
    Chip8 chip8;
    chip8.Initialize();

    const float frameTime = 1.0f / 60.0f;
    const int cylesPerFrame = 2;

    sf::Clock dtClock;
    float timeAccumulator = 0.0f;

    if (!chip8.LoadRom("C:/Users/ASUS/Downloads/tank.rom")) {
        std::cerr << "ROM failed to load\n";
        return 1;
    }

    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "Chip8 Emulator ");
    sf::RectangleShape pixel(sf::Vector2f(SCALE, SCALE));
    pixel.setFillColor(sf::Color(173, 255, 255));
  
    sf::Clock clock;
    float timer = 0.f;
    const float cycleDelay = 1.0f / 60.0f;  // 60Hz 

    while (window.isOpen()) {
        sf::Event e;
        
        while (window.pollEvent(e)) {
            if (e.type == sf::Event::Closed) {
                window.close();
            }
            if (e.type == sf::Event::KeyPressed) {
                if (keymap.count(e.key.code)) {
                    chip8.key[keymap[e.key.code]] = true;
                    cout << "key pressed" << endl;
                }
            }
            else if (e.type == sf::Event::KeyReleased) {
                if (keymap.count(e.key.code)) {
                    chip8.key[keymap[e.key.code]] = false;
                    chip8.key_released = true;
                    cout << "key released" << endl;
                }
            }
        }
        
        float delay_timer = dtClock.restart().asSeconds();
        timeAccumulator += delay_timer;
        while (timeAccumulator >= frameTime) {
            for (int i = 0; i < cylesPerFrame; ++i) {
                chip8.EmulateCycle();
            }
        if (timeAccumulator >= 1.0f / 60.0f) {
            chip8.delayTimerCountDown();
            chip8.soundTimerCountDown();
            timeAccumulator -= 1.0f / 60.0f;
        
        }

        if (chip8.drawFlag) {
            window.clear(sf::Color(32, 42, 48, 0));

            for (int y = 0; y < 32; ++y) {
                for (int x = 0; x < 64; ++x) {
                    if (chip8.screen_pixels[y * 64 + x]) {
                        pixel.setPosition(x * SCALE, y * SCALE);
                        window.draw(pixel);
                    }
                }
            }

            window.display();
            chip8.drawFlag = false;
        }
    }

    return 0;
}